## 📝 213. House Robber II  
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and   it will automatically contact the police if two adjacent houses were broken into on the same night.  
Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight **without alerting the police**.  
     
  
#### Example 1:  

```
Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

```
#### Example 2:  

```
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

```
#### Example 3:  

```
Input: nums = [1,2,3]
Output: 3

```
  
#### Constraints:  
+ `1 <= nums.length <= 100`  
+ `0 <= nums[i] <= 1000`  
  
## 📝 Solution 
```php  
/**  
 * First house (index = 0) cannot be neighbor of the last house (index = count($nums))  
 * Thats why we need to do two loops   
 * 1) First loop starts with index 0 and ends with count($nums) - 1  
 * 2) Second loop starts with index 1 and ends normally with count($nums)  
 */  
class Solution {  
  
    /**  
     * @var array  
     */  
    protected array $nums;  
  
    /**  
     * @param Integer[] $nums  
     * @return Integer  
     */  
    function rob($nums) {  
  
        $len = count($nums);  
        if($len === 0) return 0;  
        if($len === 1) return $nums[0];  
  
        $this->nums = $nums;  
          
        return max($this->maxRob(0, $len - 1), $this->maxRob(1, $len));  
    }  
  
    /**  
     * Calculated Max Rob Amount in range  
     *  
     * @param integer $start  
     * @param integer $end  
     * @return integer|null  
     */  
    protected function maxRob($start, $end) {  
          
        $current = $previous = $tmp = 0;  
  
        for ($i = $start; $i < $end; $i++) {  
            $tmp = max($previous + $this->nums[$i], $current);  
            $previous = $current;  
            $current = $tmp;  
        }  
          
        return $current;  
    }  
}  
```  
